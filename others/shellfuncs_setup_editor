#!/bin/bash
#
# Part of 'shellfuncs' git repo
# Small setup script for editor of choice.
# Usage: Can be ran standalone, but shellfuncs_setup_editor is called 
# from 'shellfuncs_new_machine_setup' script in same repo.

SHELLFUNCS_SETUP_EDITOR_PROGRAM_NAME="shellfuncs_setup_editor"

#######################################
# Usage string for shellfuncs_setup_editor.
# Globals:
#   SHELLFUNCS_SETUP_EDITOR_PROGRAM_NAME
# Outputs:
#   - usage heredoc string to stdout
# Returns:
#   0 - cat success
#   1 - cat error
#######################################
_shellfuncs_setup_editor_usage() {
	cat << _EOF_
Usage: $SHELLFUNCS_SETUP_EDITOR_PROGRAM_NAME [-h] [-a ANSWERS]

Options:
    -a  specify answers to read builtin in the program (in order that they ask)
        (format should be as a csv, e.g. 'y,n,n')

_EOF_
	return
}

#######################################
# Installs editor of choice. This may include
# a prompt in the future to select a editor to install.
# Globals:
#   SUCCESS
#   ERROR
#   SHELLFUNCS_SETUP_EDITOR_PROGRAM_NAME
# Outputs:
#   - Editor function output to stdout
#   - Additional success/error messages to stdout
# Returns:
#   0 - general success
#   1 - general error
#######################################
shellfuncs_setup_editor() {
    # NOTE: opt/OPTIND are unset incase it has been defined previously;
    # getops will place the next option (e.g. o, t) into name;
    # TODO(conner@conneracrosby.tech): getopts returns : or ? for a required argument to an option...huh?
    unset opt
    unset OPTIND
    while getopts "ha:" opt; do
        case "$opt" in
        "a")    ANSWERS="$(echo "$OPTARG" | tr ',' ' ')"
                ;;
        "h")	_shellfuncs_setup_editor_usage
                return 0
                ;;
        ":")    echo "${SHELLFUNCS_SETUP_EDITOR_PROGRAM_NAME}: an argument is required for -- $OPTARG"
                return 1
                ;;
        *)		return 1
                ;;
        esac
    done
    EDITOR="vscodium"
    # shellcheck disable=2086
    # we want globbing for $ANSWERS, will bind to positional parameters
    if ! _shellfuncs_setup_vscodium $ANSWERS; then
        echo -e "$ERROR failed to install $EDITOR!"
        return 1
    fi
    echo -e "$SUCCESS $EDITOR was successfully installed!"
    return 0
}

#######################################
# Installs vscodium. Asks the user
# whether or not to in addition to
# generate gpg keys and get codium to use them.
# That said, the public key will still need to be 
# saved on web-hosted git service (e.g. GitHub).
# Globals:
#   ERROR
#   SUCCESS
# Arguments:
#   $1: 'y' or 'n', if wanting to generate gpg key and use it
# Outputs:
#   - Success/error messages to stdout
#   - 'dd' output to stdout
#######################################
_shellfuncs_setup_vscodium() {
    GPG_URL="https://gitlab.com/paulcarroty/vscodium-deb-rpm-repo/raw/master/pub.gpg"
    # var name inspired by apt-add-repository
    APT_SOURCELINE="deb https://paulcarroty.gitlab.io/vscodium-deb-rpm-repo/debs/ vscodium main"
    CODIUM_USER_SETTINGS_PATH="${HOME}/.config/VSCodium/User/settings.json"
    CODIUM_USER_SETTINGS_DIR="$(dirname "$CODIUM_USER_SETTINGS_PATH")"
    PACKAGE_NAME="codium"
    SYSTEM_DEPENDENCIES=(
        wget
        gpg
        jq
    )
    # installation instructions from:
    # https://vscodium.com/
    if [ -n "$(which apt-get)" ]; then
        if ! sudo apt-get install "${SYSTEM_DEPENDENCIES[@]}" --assume-yes; then
            echo -e "$ERROR could not install all required system packages"
            return 1
        fi
        if ! wget --output-document - "$GPG_URL" | gpg --dearmor | sudo dd of=/etc/apt/trusted.gpg.d/vscodium.gpg; then return 1; fi
        if ! echo "$APT_SOURCELINE" | sudo tee --append /etc/apt/sources.list.d/vscodium.list; then return 1; fi
        if sudo apt-get update && ! sudo apt-get install "$PACKAGE_NAME" --assume-yes; then
            echo -e "$ERROR could not install editor package '$PACKAGE_NAME'"
            return 1
        fi
    else 
        echo -e "$ERROR system does not have a expected packaging tool to install $PACKAGE_NAME"
        return 1
    fi
    echo -e "$SUCCESS installed all required system packages and package '$PACKAGE_NAME'"
    # were any answers passed into this shellfunc?
    if [ -z "$*" ]; then
        # generating gpg keys is based on this article:
        # https://docs.github.com/en/free-pro-team@latest/github/authenticating-to-github/generating-a-new-gpg-key
        read -r -p "Do you want to generate a new key, have codium use it, and attach it to git, y/n? (n) " GEN_KEY_REPLY
    fi
    if [ "${GEN_KEY_REPLY,,}" = "y" ] || [ "$1" = "y" ]; then
        set -e
        gpg --full-generate-key
        # second pipe will have input that looks like this:
        # sec rsa<key size>/<gpg key id> <date> [SC]
        # hence we want to grep on the '/'
        # NOTE: if the system already has a secret gpg key on it, this will fail to attach the correct key 
        #       to git (one-liner assigns all the secret keys to the git configuration).
        # NOTE2: Omitting the expansion of some short flags used below, to perserve readability
        GPG_KEY_ID="$(gpg --list-secret-keys --keyid-format LONG | grep sec | grep -ohE "\/[[:alnum:]]+" | grep -ohE "[[:alnum:]]+")"
        git config --global user.signingkey "$GPG_KEY_ID"
        COMMIT_SIGNING_KEY_VALUE='{"git.enableCommitSigning": true}'
        set +e
        if ! [ -d "$CODIUM_USER_SETTINGS_DIR)" ]; then mkdir --parents "$CODIUM_USER_SETTINGS_DIR"; fi
        # does the codium setting's file already exist and is it not empty
        if [ -f "$CODIUM_USER_SETTINGS_PATH" ] && [ -s "$CODIUM_USER_SETTINGS_PATH" ]; then
            # is commit signing NOT enabled on codium (aka is the key/value for this NOT in the settings file)
            if [ "$(grep "git.enableCommitSigning" "$CODIUM_USER_SETTINGS_PATH" | grep --count true)" -eq 0 ]; then
                TEMP_JSON_FILE_NAME="$(dirname "${CODIUM_USER_SETTINGS_PATH}")/temp.json"
                jq < "$CODIUM_USER_SETTINGS_PATH" ". + $COMMIT_SIGNING_KEY_VALUE" > "$TEMP_JSON_FILE_NAME"
                mv "$TEMP_JSON_FILE_NAME" "$CODIUM_USER_SETTINGS_PATH"
            fi
        else
            echo "$COMMIT_SIGNING_KEY_VALUE" | jq . > "$CODIUM_USER_SETTINGS_PATH"
        fi
    fi
    return 0
}
