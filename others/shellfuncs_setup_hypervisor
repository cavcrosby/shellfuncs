#!/bin/bash
#
# Part of 'shellfuncs' git repo
# Small setup script for hypervisor of choice.
# Usage: Can be ran standalone, but shellfuncs_setup_hypervisor is called 
# from 'shellfuncs_new_machine_setup' script in same repo.

SHELLFUNCS_SETUP_HYPERVISOR_PROGRAM_NAME="shellfuncs_setup_hypervisor"

#######################################
# Usage string for shellfuncs_setup_hypervisor.
# Globals:
#   SHELLFUNCS_SETUP_HYPERVISOR_PROGRAM_NAME
# Outputs:
#   - usage heredoc string to stdout
# Returns:
#   0 - cat success
#   1 - cat error
#######################################
_shellfuncs_setup_hypervisor_usage () {
	cat << _EOF_
Usage: $SHELLFUNCS_SETUP_HYPERVISOR_PROGRAM_NAME [-h] [-a ANSWERS]

Options:
    -a  specify answers to read builtin in the program (in order that they ask)
        (format should be as a csv, e.g. 'y,n,n')

_EOF_
	return
}

#######################################
# Installs hypervisor of choice. This may include
# a prompt in the future to select a hypervisor to install.
# Globals:
#   SUCCESS
#   ERROR
#   SHELLFUNCS_SETUP_HYPERVISOR_PROGRAM_NAME
# Outputs:
#   - Hypervisor function output to stdout
#   - Additional success/error messages to stdout
# Returns:
#   0 - general success
#   1 - general error
#######################################
shellfuncs_setup_hypervisor () {
    # NOTE: opt/OPTIND are unset incase it has been defined previously;
    # getops will place the next option (e.g. o, t) into name;
    unset opt
    unset OPTIND
    while getopts "ha:" opt; do
        case "$opt" in
        "a")    ANSWERS="$(echo "$OPTARG" | tr ',' ' ')"
                ;;
        "h")	_shellfuncs_setup_hypervisor_usage
                return 0
                ;;
        ":")    echo "${SHELLFUNCS_SETUP_HYPERVISOR_PROGRAM_NAME}: an argument is required for -- $OPTARG"
                return 1
                ;;
        *)		return 1
                ;;
        esac
    done
    HYPERVISOR="virtualbox"
    # shellcheck disable=2086
    # we want globbing for $ANSWERS, will bind to positional parameters
    _shellfuncs_setup_virtualbox $ANSWERS || EXIT_STATUS="$?"
    if [ "$EXIT_STATUS" -eq 2 ]; then
        return 0
    elif [ "$EXIT_STATUS" -ne 0 ]; then
        echo -e "$ERROR failed to install $HYPERVISOR!"
        return 1
    else
        echo -e "$SUCCESS $HYPERVISOR was successfully installed!"
        return 0
    fi    
}

#######################################
# Installs Oracle's VirtualBox. Asks the user
# whether or not to install the extension pack
# for virtualbox.
# Globals:
#   ERROR
#   SUCCESS
# Arguments:
#   $1: positive int for distro selection
#   $2: 'y' or 'n', if wanting to install virtualbox's extension pack
# Outputs:
#   - Success/error messages to stdout
# Returns:
#   0 - general success
#   1 - general error
#   2 - prompted exit from interactive menu
#######################################
_shellfuncs_setup_virtualbox () {
    VIRTUALBOX_DEB_REPO_URL="https://download.virtualbox.org/virtualbox/debian"
    # NOTE: from the virtualbox website:
    # Please install the same version extension pack as your installed version of VirtualBox.
    # Just ensure major.minor versions match, not so worried about patch
    EXT_PACK_URL="https://download.virtualbox.org/virtualbox/6.1.18/Oracle_VM_VirtualBox_Extension_Pack-6.1.18.vbox-extpack"
    EXT_PACK_NAME="$(basename "$EXT_PACK_URL")"
    PACKAGE_NAME="virtualbox-6.1"
    # installation instructions from:
    # https://www.virtualbox.org/wiki/Linux_Downloads
    if [ -n "$(which apt-get)" ]; then
        cat << _EOF_

Debian distributions:

1. focal
2. bionic
3. buster
0. Quit (default)

_EOF_
        if [ -z "$*" ]; then
            read -r -p "Select the system distribution used [0-3]: " SELECTION_REPLY
        else
            SELECTION_REPLY="$1"
        fi
        case "$SELECTION_REPLY" in
        1)  DEBIAN_DISTRO="focal"
            ;;
        2)  DEBIAN_DISTRO="bionic"
            ;;
        3)  DEBIAN_DISTRO="buster"
            ;;
        *)  echo "exited"
            return 2
            ;;
        esac
        sudo tee <<< "deb [arch=amd64] $VIRTUALBOX_DEB_REPO_URL $DEBIAN_DISTRO contrib" --append /etc/apt/sources.list.d/virtualbox.list || return 1
        # NOTE: keys are in the same repo but this may not always be a safe assumption
        if ! wget --output-document - https://www.virtualbox.org/download/oracle_vbox_2016.asc | sudo apt-key add -; then return 1; fi
        if ! wget --output-document - https://www.virtualbox.org/download/oracle_vbox.asc | sudo apt-key add -; then return 1; fi
        sudo apt-get update || return 1
        sudo apt-get install "$PACKAGE_NAME" --assume-yes || return 1
    else 
        echo -e "$ERROR system does not have a expected packaging tool to install $PACKAGE_NAME"
        return 1
    fi
    echo -e "$SUCCESS installed package '$PACKAGE_NAME'"
    if [ -z "$*" ]; then
        # no need to eject/return at this point, just signal to the user an issue if an error occurs
        read -r -p "Do you want to install the extension pack for virtualbox, y/n? (n) " GET_EXT_PACK_REPLY
    fi
    if [ "${GET_EXT_PACK_REPLY,,}" == "y" ] || [ "$2" == "y" ]; then
        if wget --quiet --output-document="$EXT_PACK_NAME" "$EXT_PACK_URL"; then
            # license can be retrieved after doing manual install of the extension pack 
            if ! sudo vboxmanage extpack install \
                --accept-license=33d7284dc4a0ece381196fda3cfe2ed0e1e8e7ed7f27b9a9ebc4ee22e24bd23c \
                "$EXT_PACK_NAME"; then
                    echo -e "$ERROR failed to install extension pack for virtualbox!"
            else
                echo -e "$SUCCESS the extension pack for virtualbox was installed"
            fi
            rm "$EXT_PACK_NAME"
        else
            echo -e "$ERROR failed to download the extension pack for virtualbox!"
        fi
    fi
    return 0
}
