#!/bin/bash
#
# shellcheck disable=1090

#######################################
# Usage string for the program.
# Globals:
#   PROGRAM_NAME
# Outputs:
#   - usage heredoc string to stdout
# Returns:
#   0 - cat success
#   1 - cat error
#######################################
usage () {
	cat << _EOF_
Usage: $PROGRAM_NAME [-h] [-t TESTSHELLFUNCS_FILENAME]

Options:
	-t	specify a single test program/script to run

_EOF_
	return
}

#######################################
# Used to run testshellfuncs programs. 
# Allows in defined cases to rerun program(s) 
# if the re-running requires subtle changes.
# Globals:
#   SUDO_PASSWORD
#   SKIPPING_TEST_MESSAGE
#   SHELLFUNCS_TEST_SCRIPTS_ENV_PATH
#	MUST_BE_ROOT_STATUS_CODE
#	TRYING_TEST_AGAIN_MESSAGE
# Arguments:
#   $1: program/script name
#   $2: previous status code of the program/script ($1)
# Outputs:
#   - Success/error messages to stdout
# Returns:
#   0 - general success
#   1 - general error
#	MUST_BE_ROOT_STATUS_CODE
#######################################d
run_testshellfunc_program() {
	FILENAME="$1"
	PREVIOUS_STATUS_CODE="$2"

	# there shouldn't be a default case (like '*)'), as PREVIOUS_STATUS_CODE
	# should either be empty or contain some positive int
	# NOTE: this is just to try and rerun scripts if the change is subtle
	case "$PREVIOUS_STATUS_CODE" in
	"$MUST_BE_ROOT_STATUS_CODE")		if [ -z "$SUDO_PASSWORD" ]; then echo "${FILENAME}: SUDO_PASSWORD not set! $SKIPPING_TEST_MESSAGE"; return 0; fi
										echo "$SUDO_PASSWORD" | sudo --stdin SHELLFUNCS_TEST_SCRIPTS_ENV_PATH="$SHELLFUNCS_TEST_SCRIPTS_ENV_PATH" "${PWD}/$FILENAME"; EXIT_STATUS="$?"
										;;
	"")									./"$FILENAME"; EXIT_STATUS="$?"
										;;
	esac
	
	if [ "$EXIT_STATUS" = "$PREVIOUS_STATUS_CODE" ]; then
		echo "${PROGRAM_NAME}: tried to re-run script in a known way, but got same error"
		echo "${PROGRAM_NAME}: either issue not fixed or shellfunc actually returned such status code?"
		return $EXIT_STATUS
	fi

	case "$EXIT_STATUS" in
	"$MUST_BE_ROOT_STATUS_CODE")		echo "${FILENAME}: $TRYING_TEST_AGAIN_MESSAGE"
										run_testshellfunc_program "$FILENAME" "$MUST_BE_ROOT_STATUS_CODE"
										;;
	*)									return $EXIT_STATUS
										;;
	esac
}

#######################################
# Not a function at the moment, but can be considered
# the main of the program.
#######################################
# NOTE: set -e might not be needed as the driver probably
# should report status codes of each testshellfunc_program
# (or at least be ok with run_testshellfunc_program returning non-zero status codes) 
. "$SHELLFUNCS_TEST_SCRIPTS_ENV_PATH"

# NOTE: opt is unset incase it has been defined previously;
# getops will place the next option (e.g. o, t) into name;
unset opt
while getopts "ht:" opt; do
	case "$opt" in
	"t")    TESTSHELLFUNCS_PROGRAMS=$OPTARG
			;;
	"h")	usage
			exit 0
			;;
	":")    echo "${PROGRAM_NAME}: an argument is required for -- $OPTARG"
			exit 1
			;;
    *)		;;
    esac
done

# for now the default will be to run all test programs
# NOTE: globbing pattern should be generalized with exceptions
# being handled in the below case statement
if [ -z "$TESTSHELLFUNCS_PROGRAMS" ]; then
	TESTSHELLFUNCS_PROGRAMS="*"
fi

for f in $TESTSHELLFUNCS_PROGRAMS
do
    case "$f" in
		"$(basename "$SHELLFUNCS_TEST_SCRIPTS_ENV_PATH")")		;;
		"common_tests")											;;
		"shunit2")												;;
		"$(basename "$0")")										;;
		*)														echo "${f}: running test(s)"
																run_testshellfunc_program "$f"
																;;
	esac
done

exit 0
