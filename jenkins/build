#!/bin/bash -xe
# NOTES: do not rely on jenkins user global git config file
# as future projects (this one included) will truncate the generic credential list.
# What I expect is that cache will allow the program to stash its credentials in memory,
# meaning it will no longer rely on the global config after the first time (assuming the timeout is adequate).
# TODO(cavcrosby): see about re-implementing this part to allow usage of the global git configuration. Otherwise it will be more cumbersome to get the system user the repos needed/desired.

git config --global credential.helper "cache --timeout=30"
git config --global credential.username "$JENKINS_GITHUB_CREDENTIAL_USERNAME"

# NOTE: the env var file name is ok as just .env, as long as we are not
# planning on mv'ing it elsewhere
# shellcheck disable=1091
. "${PWD}/jenkins/.env"
git clone "$SHELL_PROVISIONERS_REPO_URL" "$SHELL_PROVISIONERS_REPO_NAME"

# source'd so we can have the configurations of the VM
# shellcheck disable=1090
. "${SHELL_PROVISIONERS_REPO_NAME}/${SHELL_PROVISIONERS_CONFIG_FILE_NAME}"
cp "$EXPECTED_OVA_FILE_PATH" "$PWD"
# NOTE: needed so that a new shellfuncs VM doesn't cause the build to panic
# when trying to ssh into the VM
rm --force "${HOME}/.ssh/known_hosts"
vboxmanage import "$EXPECTED_OVA_NAME" --vsys 0 --vmname "$EXPECTED_VM_NAME"
vboxmanage startvm "$EXPECTED_VM_NAME" --type headless

# NOTE: use this vs just sleeping once for 'x' number of seconds,
# considering the variation of time it takes to get a ssh connection
connected_via_ssh=
while [ -z "$connected_via_ssh" ]; do
    if ssh -o "StrictHostKeyChecking no" "${VM_USER_NAME}@${SHELLFUNCS_VM_IPV4_ADDR}" 'exit' > /dev/null 2>&1; then
        connected_via_ssh="true"
    else
        sleep 10
    fi
done

# NOTES: we want this heredoc to mostly expand on the client.
# It is assumed that the correct shell start up dotfile will contain
# GIT_REPOS_PATH. 'bash --login -i' is used because any command given
# to ssh will execute 'on the remote host instead of a login shell'
# (man page on ssh). This is more than likly not what we want as
# the shell startup file should more than likly be '.profile' and it
# should be read in before executing the following below this comment.
eval "$(ssh "${VM_USER_NAME}@${SHELLFUNCS_VM_IPV4_ADDR}" bash --login -i -c 'printenv' | grep '^GIT_REPOS_PATH=')"
# TODO(cavcrosby): error checking could be better, e.g. GIT_TAG could possible not exist
# shellcheck disable=2087
ssh "${VM_USER_NAME}@${SHELLFUNCS_VM_IPV4_ADDR}" <<- _EOF_
    cd "${GIT_REPOS_PATH}/${PROJECT_REPO_NAME}" || exit 1
    if [ -n "$GIT_TAG" ]; then
        git checkout --quiet "$GIT_TAG"
        echo "!!! Checkout $PROJECT_REPO_NAME at $GIT_TAG !!!"
    fi
    exit 0
_EOF_

# run test suite's driver
# TODO(cavcrosby): see about reporting to Jenkins a non-zero status code when any of the test cases fail (that is at the end having ran the test cases).
if ! ssh "${VM_USER_NAME}@${SHELLFUNCS_VM_IPV4_ADDR}" <<- '_EOF_'; then
    # run test's driver twice
    cd "$SHELLFUNCS_TEST_SCRIPTS_PATH" || exit 1
    # turn off colored output from shunit2
    SHUNIT_COLOR="none"
    export SHUNIT_COLOR
    if ! ./shellfuncs_driver; then exit 1; fi
    if ! ./shellfuncs_driver; then exit 1; fi
    exit 0
_EOF_
    ALL_TESTS_PASSED="false"
fi
# cleanup
vboxmanage controlvm "$EXPECTED_VM_NAME" poweroff
# wait a few seconds before attempting to delete the VM
sleep 15
vboxmanage unregistervm "$EXPECTED_VM_NAME" --delete

if [ -z "$ALL_TESTS_PASSED" ]; then
    exit 0
fi

exit 1
