#!/bin/bash
#
# Part of 'shellfuncs' git repo
# Small setup script that enables the
# user to pull scripts as shell functions in their
# shell session.
# Usage: curl --silent https://raw.githubusercontent.com/reap2sow1/shellfuncs/main/install | bash

set -e
PROGRAM_NAME="install"
DEFAULT_SHELL_DOTFILE_NAME=".profile"
LOCAL_REPO_NAME="shellfuncs"
SCRIPTS_DIR_NAME="scripts"
OTHER_SCRIPTS_DIR_NAME="others"
TEST_SCRIPTS_DIR_NAME="tests"
TEST_SCRIPTS_ENV_FILENAME=".test_env"
TEST_SCRIPTS_ENV_LOCAL_FILENAME=".test_env_local"
TEST_SCRIPTS_ENV_SECRETS=".test_env_secrets"
YES="y"
NO="n"
# where this repo is located remotely (doesn't have to be github per say)
REMOTE_REPO_URL='https://github.com/reap2sow1/shellfuncs'
# NOTES: SHELLFUNCS_AUTOMATED_INSTALL && SHELLFUNCS_REINSTALL go together.
# Should either be empty (implied n) or take "y" ==> yes. Needs to be
# commented out, otherwise will override any global env var version(s).
# SHELLFUNCS_AUTOMATED_INSTALL=
# SHELLFUNCS_REINSTALL=

if [ -z "$(which git)" ]; then
	echo "${PROGRAM_NAME}: git cannot be found on the PATH!"
	exit 1
fi

if [ -z "$GIT_REPOS_PATH" ] && [ "$SHELLFUNCS_AUTOMATED_INSTALL" != "$YES" ]; then
	read -r -e -p "What directory are git repositories stored in? ==> " -i "$HOME" GIT_REPOS_PATH <&1
elif [ -z "$GIT_REPOS_PATH" ] && [ "$SHELLFUNCS_AUTOMATED_INSTALL" = "$YES" ]; then
    echo "${PROGRAM_NAME}: trying automated install but GIT_REPOS_PATH is not defined"
	exit 1
fi

if [ -z "$SHELL_DOTFILE_NAME" ]; then
	SHELL_DOTFILE_NAME=$DEFAULT_SHELL_DOTFILE_NAME
fi

LOCAL_REPO_PATH="${GIT_REPOS_PATH}/${LOCAL_REPO_NAME}"
SCRIPTS_PATH="${LOCAL_REPO_PATH}/${SCRIPTS_DIR_NAME}"
OTHER_SCRIPTS_PATH="${LOCAL_REPO_PATH}/${OTHER_SCRIPTS_DIR_NAME}"
TEST_SCRIPTS_PATH="${LOCAL_REPO_PATH}/${TEST_SCRIPTS_DIR_NAME}"
TEST_ENV_PATH="${TEST_SCRIPTS_PATH}/${TEST_SCRIPTS_ENV_FILENAME}"
TEST_ENV_LOCAL_PATH="${TEST_SCRIPTS_PATH}/${TEST_SCRIPTS_ENV_LOCAL_FILENAME}"
TEST_SCRIPTS_ENV_SECRETS_PATH="${TEST_SCRIPTS_PATH}/${TEST_SCRIPTS_ENV_SECRETS}"
SHELL_DOTFILE_PATH="${HOME}/${SHELL_DOTFILE_NAME}"

# NOTE: setting just SHELLFUNCS_REINSTALL but not SHELLFUNCS_AUTOMATED_INSTALL
# to "y", will still prompt and override the SHELLFUNCS_REINSTALL var
if [ "$SHELLFUNCS_AUTOMATED_INSTALL" != "$YES" ]; then
    # shellcheck disable=2034
    read -r -p "Is this a reinstall, ${YES}/${NO}? (${NO}) " SHELLFUNCS_REINSTALL <&1
fi

# using parameter expansion, ',,' append will convert the string to lowercase
if [ "${SHELLFUNCS_REINSTALL,,}" == "$YES" ] && [ -d "$LOCAL_REPO_PATH" ]; then
	if [ "$SHELLFUNCS_AUTOMATED_INSTALL" != "$YES" ]; then
		echo "${PROGRAM_NAME}: the $LOCAL_REPO_NAME repo still exists on the local file system, '${SHELL_DOTFILE_NAME}' may still contain 'install' functions"
		read -r -p "Proceed with reinstall, ${YES}/${NO}? (${NO}) " PROCEED_REINSTALLED_REPLY <&1
	fi
    # NOTES: instead of setting a default reinstall reply to yes, rather have 
    # default answer as 'no'. Better to opt in than out.
    if [ "${PROCEED_REINSTALLED_REPLY,,}" == "$YES" ] || [ "$SHELLFUNCS_AUTOMATED_INSTALL" = "$YES" ]; then
        rm --recursive --force "$LOCAL_REPO_PATH"
    else
        exit 0
    fi
fi

git clone --quiet "$REMOTE_REPO_URL" "$LOCAL_REPO_PATH" > /dev/null
# NOTE: setups dotfile to allow the shell to update the local repo
# and to pull in shell scripts and 
{
	echo ""
	echo "# Part of $LOCAL_REPO_NAME git repo"
	echo "SHELLFUNCS_REPO_PATH=$LOCAL_REPO_PATH"
	echo "SHELLFUNCS_SCRIPTS_PATH=$SCRIPTS_PATH"
	echo "SHELLFUNCS_OTHER_SCRIPTS_PATH=$OTHER_SCRIPTS_PATH"
    echo "export SHELLFUNCS_TEST_SCRIPTS_PATH=$TEST_SCRIPTS_PATH"
	echo "export SHELLFUNCS_TEST_SCRIPTS_ENV_PATH=$TEST_ENV_PATH"
	if [ -z "$SUCCESS" ] || [ -z "$ERROR" ] || [ -z "$WARNING" ]; then
		echo "# ANSI escape code sequences for status messages with character coloring"
	fi
	if [ -z "$SUCCESS" ]; then
		SUCCESS="\033[1;32m[SUCCESS]:\033[0m"
		echo "export SUCCESS=\"${SUCCESS}\""
	fi
	if [ -z "$WARNING" ]; then
		echo 'export WARNING="\033[1;33m[WARNING]:\033[0m"'
	fi
	if [ -z "$ERROR" ]; then
		echo 'export ERROR="\033[1;31m[ERROR]:\033[0m"'
	fi
	echo ""
	cat << '_EOF_'
#######################################
# Loads each 'shellfuncs' script into from SHELLFUNCS_SCRIPTS_PATH
# the current shell session.
# Globals:
#   SHELLFUNCS_REPO_PATH
#   SHELLFUNCS_SCRIPTS_PATH
#   SUCCESS
#   ERROR
# Outputs:
#   ERROR: If shellfuncs repo could not be found
#######################################
load_shellfuncs () {
    if [ -d "$SHELLFUNCS_REPO_PATH" ]; then
        # shellcheck source=/dev/null
		for script_name in "${SHELLFUNCS_SCRIPTS_PATH}/"*; do
            . "$script_name"
        done
        echo -e "$SUCCESS Loaded 'shellfuncs' repo scripts"
    else
        echo -e "$ERROR 'shellfuncs' repo could not be found, failed to load scripts"
        return 1
    fi
    return 0
}

#######################################
# Updates 'shellfuncs' repo
# Globals:
#   SHELLFUNCS_REPO_PATH
#   SUCCESS
#   ERROR
# Outputs:
#   ERROR: If shellfuncs repo could not be found
#######################################
update_shellfuncs () {
    if [ -d "$SHELLFUNCS_REPO_PATH" ]; then
        cd "$SHELLFUNCS_REPO_PATH" || exit
        git pull --quiet
        echo -e "$SUCCESS Updated 'shellfuncs' repo"
        cd - > /dev/null || exit
    else
        echo -e "$ERROR 'shellfuncs' repo could not be found, failed to update scripts"
        return 1
    fi
    return 0
}

update_shellfuncs
load_shellfuncs
_EOF_

} >> "$SHELL_DOTFILE_PATH"

# NOTES: setups (local) test env dotfile to allow the shell to pull in additional
# shell scripts from 'others'. Also inserts a env var that points to the
# original shell dotfile used during the install.
{
    echo "#"
    echo "#"
    echo "# load_other_shellfuncs is added to pull other scripts"
    echo "# for testing, also contains local system config(s)."
    echo ""
	echo "SHELL_DOTFILE_PATH=$SHELL_DOTFILE_PATH"
    # shellcheck disable=2016
	echo '. "$SHELL_DOTFILE_PATH" > /dev/null 2>&1'
	echo ""
		cat << '_EOF_'
#######################################
# Loads each 'shellfuncs' script into from 
# SHELLFUNCS_OTHER_SCRIPTS_PATH the current shell session.
# Globals:
#   SHELLFUNCS_REPO_PATH
#   SHELLFUNCS_OTHER_SCRIPTS_PATH
#   SUCCESS
#   ERROR
# Outputs:
#   ERROR: If shellfuncs repo could not be found
#######################################
load_other_shellfuncs () {
    if [ -d "$SHELLFUNCS_REPO_PATH" ]; then
        # shellcheck source=/dev/null
        for script_name in "${SHELLFUNCS_OTHER_SCRIPTS_PATH}/"*; do
            . "$script_name"
        done
        # is the current shell interpreting this bash?
        # NOTE: default will be considered some 'sh', assuming backslashes are already interpreted
        if [ -n "${BASH_VERSION:-}" ]; then
            echo -e "$SUCCESS Loaded 'shellfuncs' repo OTHER scripts" > /dev/null 2>&1
        else
            echo "$SUCCESS Loaded 'shellfuncs' repo OTHER scripts" > /dev/null 2>&1
        fi
    else
        if [ -n "${BASH_VERSION:-}" ]; then
            echo -e "$ERROR 'shellfuncs' repo could not be found, failed to load OTHER scripts"
        else
            echo "$ERROR 'shellfuncs' repo could not be found, failed to load OTHER scripts"
        fi
        return 1
    fi
    return 0
}

load_other_shellfuncs
_EOF_
} >> "$TEST_ENV_LOCAL_PATH"

{
    echo "#"
    echo "#"
    echo "# Secrets used for testing"
    echo ""
	echo "SUDO_PASSWORD="
} >> "$TEST_SCRIPTS_ENV_SECRETS_PATH"

echo -e "$SUCCESS installation was successfull! Restart your shell session to pull in/update scripts"

exit 0
