#!/bin/bash
#
# Part of 'shellfuncs' git repo
# Small setup script that enables the
# user to pull scripts as shell functions in their
# shell session.
# Usage: curl --silent https://raw.githubusercontent.com/reap2sow1/shellfuncs/main/install | bash

set -e
PROGRAM_NAME="install"
DEFAULT_SHELL_DOTFILE_NAME=".bashrc"
LOCAL_REPO_NAME="shellfuncs"
SCRIPTS_DIR_NAME="scripts"
OTHER_SCRIPTS_DIR_NAME="others"
# where this repo is located remotely (doesn't have to be github per say)
REMOTE_REPO_URL='https://github.com/reap2sow1/shellfuncs'

if [ -z "$(which git)" ]; then
	echo "${PROGRAM_NAME}: git cannot be found on the PATH!"
	exit 1
fi

if [ -z "$GIT_REPOS_PATH" ]; then
	read -r -e -p "What directory are git repositories stored in? ==> " -i "$HOME" GIT_REPOS_PATH <&1
fi

if [ -z "$SHELL_DOTFILE_TO_WRITE_TO" ]; then
	SHELL_DOTFILE_TO_WRITE_TO=$DEFAULT_SHELL_DOTFILE_NAME
fi

LOCAL_REPO_PATH="${GIT_REPOS_PATH}/${LOCAL_REPO_NAME}"
SCRIPTS_PATH="${LOCAL_REPO_PATH}/${SCRIPTS_DIR_NAME}"
OTHER_SCRIPTS_PATH="${LOCAL_REPO_PATH}/${OTHER_SCRIPTS_DIR_NAME}"

# shellcheck disable=2034
read -r -p "Is this a reinstall, y/n? (n) " RE_INSTALL_REPLY <&1

# using parameter expansion, ',,' append will convert the string to lowercase
if [ "${RE_INSTALL_REPLY,,}" == "y" ]; then
	if [ -d "$LOCAL_REPO_PATH" ]; then
		echo "${PROGRAM_NAME}: the $LOCAL_REPO_NAME repo still exists on the local file system, '${SHELL_DOTFILE_TO_WRITE_TO}' may still contain 'install' functions"
		read -r -p "Proceed with reinstall, y/n? (n) " PROCEED_REINSTALLED_REPLY <&1
		if [ "${PROCEED_REINSTALLED_REPLY,,}" == "y" ]; then
			rm --recursive --force "$LOCAL_REPO_PATH"
		else
			exit 0
		fi
	fi
fi

git clone --quiet "$REMOTE_REPO_URL" "$LOCAL_REPO_PATH" > /dev/null
{
	echo ""
	echo "# Part of $LOCAL_REPO_NAME git repo"
	echo "SHELLFUNCS_REPO_PATH=$LOCAL_REPO_PATH"
	echo "SCRIPTS_PATH=$SCRIPTS_PATH"
	echo "OTHER_SCRIPTS_PATH=$OTHER_SCRIPTS_PATH"
	if [ -z "$SUCCESS" ] || [ -z "$ERROR" ] || [ -z "$WARNING" ]; then
		echo "# ANSI escape code sequences for status messages with character coloring"
	fi
	if [ -z "$SUCCESS" ]; then
		SUCCESS="\033[1;32m[SUCCESS]:\033[0m"
		echo "export SUCCESS=\"${SUCCESS}\""
	fi
	if [ -z "$WARNING" ]; then
		echo 'export WARNING="\033[1;33m[WARNING]:\033[0m"'
	fi
	if [ -z "$ERROR" ]; then
		echo 'export ERROR="\033[1;31m[ERROR]:\033[0m"'
	fi
	echo ""
	cat << '_EOF_'
#######################################
# Loads each 'shellfuncs' script into from SCRIPTS_PATH
# the current shell session.
# Globals:
#   SHELLFUNCS_REPO_PATH
#   SCRIPTS_PATH
#   SUCCESS
#   ERROR
# Outputs:
#   ERROR: If shellfuncs repo could not be found
#######################################
load_shellfuncs () {
    if [ -d "$SHELLFUNCS_REPO_PATH" ]; then
        SCRIPT_NAMES="$(ls -1 "$SCRIPTS_PATH")"
        # shellcheck source=/dev/null
        for script_name in $SCRIPT_NAMES; do
            source "$SCRIPTS_PATH/$script_name"
        done
        echo -e "$SUCCESS Loaded 'shellfuncs' repo scripts"
    else
        echo -e "$ERROR 'shellfuncs' repo could not be found, failed to load scripts"
        return 1
    fi
    return 0
}

#######################################
# Updates 'shellfuncs' repo
# Globals:
#   SHELLFUNCS_REPO_PATH
#   SUCCESS
#   ERROR
# Outputs:
#   ERROR: If shellfuncs repo could not be found
#######################################
update_shellfuncs () {
    if [ -d "$SHELLFUNCS_REPO_PATH" ]; then
        cd "$SHELLFUNCS_REPO_PATH" || exit
        git pull --quiet
        echo -e "$SUCCESS Updated 'shellfuncs' repo"
        cd - > /dev/null || exit
    else
        echo -e "$ERROR 'shellfuncs' repo could not be found, failed to update scripts"
        return 1
    fi
    return 0
}

update_shellfuncs
load_shellfuncs
_EOF_

} >> "${HOME}/${SHELL_DOTFILE_TO_WRITE_TO}"

echo -e "$SUCCESS installation was successfull! Restart your shell session to pull in/update scripts"

exit 0
